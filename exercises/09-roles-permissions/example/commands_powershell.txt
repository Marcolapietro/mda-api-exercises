# Configuración inicial
$baseUrl = "http://127.0.0.1:5000"
$headers = @{
    "Content-Type" = "application/json"
}

# 1. Registrar usuario admin
$adminBody = @{
    username = "admin"
    password = "admin123"
    role = "admin"
} | ConvertTo-Json

Invoke-RestMethod -Method Post -Uri "$baseUrl/register" -Headers $headers -Body $adminBody

# 2. Registrar estudiante
$studentBody = @{
    username = "student1"
    password = "pass123"
    role = "student"
} | ConvertTo-Json

Invoke-RestMethod -Method Post -Uri "$baseUrl/register" -Headers $headers -Body $studentBody

# 3. Login como admin
$pair = "admin:admin123"
$encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))
$basicAuthHeader = @{
    Authorization = "Basic $encodedCreds"
    "Content-Type" = "application/json"
}

$adminLogin = Invoke-RestMethod -Method Post -Uri "$baseUrl/login" -Headers $basicAuthHeader
$adminToken = $adminLogin.access_token

# 4. Login como estudiante
$pair = "student1:pass123"
$encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))
$basicAuthHeader = @{
    Authorization = "Basic $encodedCreds"
    "Content-Type" = "application/json"
}

$studentLogin = Invoke-RestMethod -Method Post -Uri "$baseUrl/login" -Headers $basicAuthHeader
$studentToken = $studentLogin.access_token

# 5. Headers con token para admin
$adminAuthHeaders = @{
    Authorization = "Bearer $adminToken"
    "Content-Type" = "application/json"
}

# 6. Headers con token para estudiante
$studentAuthHeaders = @{
    Authorization = "Bearer $studentToken"
    "Content-Type" = "application/json"
}

# 7. Usar el admin dashboard
Invoke-RestMethod -Method Get -Uri "$baseUrl/admin/dashboard" -Headers $adminAuthHeaders

# 8. Intentar acceder al admin dashboard con usuario estudiante
Invoke-RestMethod -Method Get -Uri "$baseUrl/admin/dashboard" -Headers $studentAuthHeaders

# 9. Acceder a datos de estudiante
Invoke-RestMethod -Method Get -Uri "$baseUrl/student/data" -Headers $studentAuthHeaders

# 10. Ver lista de usuarios (como admin)
Invoke-RestMethod -Method Get -Uri "$baseUrl/usuarios" -Headers $adminAuthHeaders

# 11. Ver lista de usuarios con paginación
Invoke-RestMethod -Method Get -Uri "$baseUrl/usuarios?page=1&per_page=5" -Headers $adminAuthHeaders

# 12. Crear nuevo usuario (como admin)
$newUserBody = @{
    username = "student2"
    password = "pass456"
    role = "student"
} | ConvertTo-Json

Invoke-RestMethod -Method Post -Uri "$baseUrl/usuarios" -Headers $adminAuthHeaders -Body $newUserBody

# 13. Actualizar usuario (como admin)
$updateBody = @{
    password = "newpass"
} | ConvertTo-Json

Invoke-RestMethod -Method Put -Uri "$baseUrl/usuarios/student1" -Headers $adminAuthHeaders -Body $updateBody

# 14. Eliminar usuario (como admin)
Invoke-RestMethod -Method Delete -Uri "$baseUrl/usuarios/student2" -Headers $adminAuthHeaders